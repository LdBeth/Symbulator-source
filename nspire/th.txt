(â,µn1,µn2)
Prgm::If ok=7. Then:Return :EndIf::startTmr()→s\tth:true→αmetagat:"Equival"→αpurpose::If getType(s\verbose)="NONE" Then:true→s\verbose:EndIf::If getMode("Exact/Approx")="APPROXIMATE" Then:exact(µn1)→µn1:exact(µn2)→µn2:EndIf::DelVar βtool:"th"→βtool:s\s0(â,ω,exact(µn1),exact(µn2)):DelVar βtool::If ok=3. Then:0.→ok:DispHome:Return :EndIf:DelVar req,pmax,vth,ino,zeq,smax,αwantsit::string(µn1)→µn1:string(µn2)→µn2::If getType(s\toa)="STR" Then:If s\toa="DC" Then:1→δta:EndIf:If s\toa="AC" Then:2→δta:EndIf:If s\toa="FD" Then:3→δta:EndIf:Else:Local ââ:":"&â→ââ:If inString(ââ,"")≠0 or inString(ââ,":c")≠0 or inString(ââ,":l")≠0 or inString(ââ,":m")≠0 or inString(ââ,":t")≠0 Then:2→δtask:EndIf:EndIf:DelVar s\toa::If getType(δta)="NONE" Then:ClrIO:Dialog:Title "Thevenin Equivalent":DropDown "Type of Analysis",{"DC","AC","FD"},δtask:EndDlog:If ok=0. Then:Return :EndIf:δtask→δta:DelVar δtask:EndIf::true→s\select:"{v"&µn1&",v"&µn2&"}"→s\savevars::If s\verbose Then:ClrIO:Disp "Symbulator is running an":Disp "open-circuit simulation":Disp "to find the circuit's":Disp "Thévenin voltage.":Disp "":Disp "Please wait.":EndIf::If δta=1 Then:"dc"→βtool:s\s5(expr("["&û&"]"),1):DelVar βtool:EndIf::If δta=2 Then:If getType(s\rms)="NONE" Then:false→s\rms:EndIf:If inString(â,":c")=0 and inString(â,":l")=0 Then:"ω"→δω:Else:If getType(s\ω)="STR" Then:s\ω→δω:DelVar s\ω:Else:Dialog:Title "Enter radial frequency":Request "ω in rad/s",δω,0:EndDlog:If ok=0. Then:DelVar αpurpose:Return :EndIf:δω→s\sit:s\si():s\sit→δω:EndIf:EndIf::If δω="" Then:"ω"→δω:EndIf:expr(δω)→δω:"ac"→βtool:s\s5(expr("["&û&"]"),δω):DelVar βtool:EndIf::If δta=3 Then:"fd"→βtool:s\s5(expr("["&û&"]"),1):DelVar βtool:EndIf::If ok=4. Then:0.→ok:DispHome:Return :EndIf::expr("v"&µn1&"-v"&µn2&"→Vth"):s\s4(expr("["&û&"]"))::If string(vth)="0" or string(vth)="0." Then:ClrIO:Disp "This circuit is not active.":Pause "Try the ER tool instead.":DispHome:3.→ok:Return :Else:If s\verbose Then:ClrIO:Disp "Thévenin voltage found!":Disp "Symbulator will now run a":Disp "short-circuit simulation":Disp "to find the Norton current.":Disp "Please wait.":EndIf::û&";sε1,"&µn1&","&µn2&",0,0"→û::true→s\select::"{isε1,v"&µn1&",v"&µn2&"}"→s\savevars::If δta=1 Then:"dc"→βtool:s\s5(expr("["&û&"]"),1):DelVar βtool:EndIf::If δta=2 Then:"ac"→βtool:s\s5(expr("["&û&"]"),δω):DelVar βtool:EndIf::If δta=3 Then:"fd"→βtool:s\s5(expr("["&û&"]"),1):DelVar βtool:EndIf::If ok=4. Then:0.→ok:DispHome:Return :EndIf:ClrIO:If inString(string(isε1),"@")=0 Then:isε1→ino:If s\verbose Then:Disp "Norton current found!":EndIf:Else:Disp "Short simulation failed":Pause "to find a Norton current.":Goto clean:EndIf::If δta=1 Then:vth/ino→req:Else:vth/ino→zeq:EndIf::EndIf::If s\verbose Then:If δta=1 Then:Disp "Equivalent resistance":Disp "found!":Else:Disp "Equivalent impedance":Disp "found!":EndIf:EndIf::If δta=1 Then:vth*ino/4→pmax:EndIf:If δta=2 Then:If s\rms Then:(abs(vth))^2/(4*real(zeq))→pmax:Else:(abs(vth))^2/(8*real(zeq))→apmax:EndIf:EndIf:If s\verbose Then:ClrIO:Dialog:Title "Is a load next?":Text "If you are planning to analyze next":Text "a load connected to this, we can give":Text "you an equivalent circuit you can use":Text "and some key equations that will help.":DropDown "Interested?",{"No","Yes"},αwantsit:EndDlog::If αwantsit=2 Then::DelVar eqcir,irl,jn,load,load_,ino_,zeq_,n,prl,re,rl,srl,vrl::If δta=1 Then:"jN,0,n,iNo:rE,n,0,rEq:rL,n,0,Load"→eqcir:Define irl=ino*req/(load+req):Define vrl=load*ino*req/(load+req):Define prl=load*ino^2*req^2/(load+req)^2:Else:"jN,0,n,iNo:rE,n,0,zEq:rL,n,0,Load_"→eqcir:Define ino_=ino:Define zeq_=zeq:If s\rms Then:Define irl=ino_*zeq_/(load_+zeq_):Define vrl=ino_*load_*zeq_/(load_+zeq_):Define prl=real(ino_*conj(ino_)*load_*zeq_*conj(zeq_)/((load_+zeq_)*(conj(load_)+conj(zeq_)))):Define srl=ino_*conj(ino_)*load_*zeq_*conj(zeq_)/((load_+zeq_)*(conj(load_)+conj(zeq_))):Else:Define irl=ino_*zeq_/(load_+zeq_):Define vrl=ino_*load_*zeq_/(load_+zeq_):Define aprl=real(ino_*conj(ino_)*load_*zeq_*conj(zeq_)/((load_+zeq_)*(conj(load_)+conj(zeq_))))/2:Define srl=ino_*conj(ino_)*load_*zeq_*conj(zeq_)/(2*(load_+zeq_)*(conj(load_)+conj(zeq_))):EndIf:EndIf:EndIf:EndIf::Lbl clean:s\s4(expr("["&û&"]"))::DelVar δtc,δta,δω,dcir,αncc,αnec,αszc,αζ1,αζ2,αζ3,αζ4,αζ5,isε1:s\s9()::DelVar û,αmetagat,αwantsit:If s\verbose Then:Disp "Elapsed: "&string(checkTmr(exact(s\tth)))&" seconds.":EndIf:DelVar s\tth:DispHome
EndPrgm
